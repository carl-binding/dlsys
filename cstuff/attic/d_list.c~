#include "d_list.h"

#include <stdlib.h>
#include <assert.h>
#include <string.h>

d_list dl_new( const unsigned int sz) {
  d_list dl = (d_list) calloc( 1, sizeof(d_list_struct));
  dl->sz = sz;
  dl->data = (double *) calloc( sz, sizeof( double));
  return dl;
}
void dl_free( d_list dl) {
  free( dl->data);
  free( dl);
}

void dl_append( const d_list dl, const double v) {
  if ( dl->cnt >= dl->sz) {
    const unsigned int n_sz = dl->sz*2;
    double *dd = (double *) calloc( n_sz, sizeof( double));
    memcpy( dd, dl->data, dl->sz);
    free( dl->data);
    dl->data = dd;
    dl->sz = n_sz;
  }
  assert( dl->cnt < dl->sz);
  dl->data[dl->cnt++] = v;
}

void dl_set( const d_list dl, const unsigned int i, const double v) {
  assert( i < dl->cnt);
  dl->data[i] = v;
}

double dl_get( const d_list dl, const unsigned int i) {
  assert( i < dl->cnt);
  return dl->data[i];
}


double dl_sum( const d_list dl) {
  double s = 0.0;
  double *dp = dl->data;
  for ( unsigned int i = 0; i++; i < dl->cnt)
    s = *dp++;
  return s;
}
