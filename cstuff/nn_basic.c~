#include "mem.h"
#include "nn_basic.h"

#include <assert.h>

#define FALSE 0
#define TRUE 1

void mdl_free( mdl_module m) {
  // free parameters
  if ( m->parameters != NULL)
    l_free( m->parameters);
  
  // recurse over modules, depth-first
  if ( m->modules != NULL)
    l_free( m->modules);

  // clean up sub-classes as needed
  switch( m->sub_class) {
  case MDL_IDENTITY:
  case MDL_LINEAR:
  case MDL_FLATTEN:
  case MDL_RELU:
  case MDL_SEQUENTIAL:
  case MDL_SOFTMAX_LOSS:
  case MDL_BATCH_NORM_1D:
  case MDL_LAYER_NORM_1D:
  case MDL_DROPOUT:
  case MDL_RESIDUAL:
  default:
    assert( FALSE);
  }
  MEM_FREE( m);
}

uint8_t mdl_is_module( const void *p) {
  mdl_module m = (mdl_module) p;
  return m->type_tag == MDL_TYPE_TAG;
}

static void init_mdl( const mdl_module m, const uint16_t sub_class,
		      const uint16_t nbr_params, const uint16_t nbr_modules) {
  m->type_tag = MDL_TYPE_TAG;
  m->sub_class = sub_class;
  if ( nbr_params > 0) {
    m->parameters = l_new( nbr_params, T_PTR, (void (*)) v_free);
  } else {
    m->parameters = NULL;
  }
  if ( nbr_modules > 0) {
    m->modules = l_new( nbr_modules, T_PTR, (void (*)) mdl_free);
  } else {
    m->modules = NULL;
  }
  m->training = FALSE;
  m->forward = NULL; // set by sub-class...
}

// recursively traverse the children of module m and append to list
l_list mdl_children( const mdl_module m, l_list children) {

  if ( m->modules == NULL)
    return children;

  // allocate children list
  if ( children == NULL)
    children = l_new( l_len( m->modules), T_PTR, NULL);

  for ( int i = 0; i < l_len( m->modules); i++) {
    mdl_module c = (mdl_module) l_get_p( m->modules, i);
    l_append_ptr( children, (void *) c);
    children = mdl_children( c, children);
  }
  return children;
}

l_list mdl_parameters( const mdl_module m, l_list parameters) {

  if ( m->parameters == NULL && m->modules == NULL)
    return parameters;

  // allocate parameter list if needed
  if ( parameters == NULL && m->parameters != NULL) {
    parameters = l_new( l_len( m->parameters), T_PTR, NULL);
  }

  // append parameters
  if ( m->parameters != NULL) {
    assert( parameters != NULL);
    for ( int i = 0; i < l_len( m->parameters); i++) {
      Value c = (Value) l_get_p( m->parameters, i);
      assert( v_is_tensor( c));
      l_append_ptr( parameters, (void *) c);
    }
  }

  // append parameters of children recursively
  if ( m->modules != NULL) {
    for ( int i = 0; i < l_len( m->modules); i++) {
      mdl_module c = (mdl_module) l_get_p( m->modules, i);
      assert( mdl_is_module( c));
      parameters = mdl_parameters( c, parameters);
    }
  }

  return parameters;
  
}


static void mdl_set_training_flag( const mdl_module m, const uint8_t flag) {
  m->training = flag;
  l_list children = mdl_children( m, NULL);
  if ( children != NULL) {
    for ( uint32_t i = 0; i < l_len( children); i++) {
      mdl_module c = (mdl_module) l_get_p( children, i);
      c->training = flag;
    }
    l_free( children);
  }
}

void mdl_train( const mdl_module m) {
  mdl_set_training_flag( m, TRUE);
}

void mdl_eval( const mdl_module m) {
  mdl_set_training_flag( m, FALSE);
}

/*
  knowing which module we call, we have n_args and further params.
  mdl_module m = mdl_xxx_new(...)
  mdl_call( m, <n_args>, arg1, arg2 ... argn)
*/
Value mdl_call( const mdl_module m, uint32_t n_args, ...) {
  assert( mdl_is_module( m));
  va_list args;
  va_start( args, n_args);
  // just some sanity check...
  assert( n_args == 1 || n_args == 2);
  Value t = (*m->forward) (n_args, args);
  va_end( args);
  assert( v_is_tensor( t));
  return t;
}

static Value identity_fwd( uint32_t n_args, ...) {

  assert( n_args == 1);
  
  va_list args;
  va_start( args, n_args);
  Value t = va_arg( args, Value);
  va_end( args);
  assert( v_is_tensor( t));
  return t;
}

mdl_identity mdl_identity_new() {
  mdl_identity id = (mdl_identity) MEM_CALLOC( 1, sizeof( mdl_identity_struct));
  init_mdl( (mdl_module) id, MDL_IDENTITY, 0, 0);
  ((mdl_module) id)->forward = identity_fwd;
  return id;
}

mdl_linear mdl_linear_new( const uint32_t in_features, const uint32_t out_features) {
  mdl_linear l = (mdl_linear) MEM_CALLOC( 1, sizeof( mdl_linear_struct));
  init_mdl( (mdl_module) l, MDL_LINEAR, 2, 0);

  l->in_features = in_features;
  l->out_features = out_features;

  l->weight = v_kaiming_uniform( in_features, out_features, "RELU");
  l->bias = v_kaiming_uniform( 1, out_features, "RELU");

  l_append_ptr( l->mdl.parameters, l->weight);
  l_append_ptr( l->mdl.parameters, l->bias);
}
